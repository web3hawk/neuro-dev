{
  "DemandAnalysis": {
    "assistant_role_name": "首席产品官",
    "user_role_name": "首席执行官",
    "phase_prompt": [
      "ChatDev之前制作过以下形式的产品：",
      "图像：可以通过折线图、柱状图、流程图、云图、甘特图等形式展示信息。",
      "文档：可以通过.docx文件展示信息。",
      "PowerPoint：可以通过.pptx文件展示信息。",
      "Excel：可以通过.xlsx文件展示信息。",
      "PDF：可以通过.pdf文件展示信息。",
      "网站：可以通过.html文件展示个人简历、教程、产品或想法。",
      "应用程序：可以通过python实现可视化游戏、软件、工具等。",
      "仪表板：可以显示一个可视化实时信息的面板。",
      "思维导图：可以表示想法，将相关概念围绕核心概念排列。",
      "作为{assistant_role}，为了满足新用户的需求并确保产品可实现，您应该继续与我讨论决定我们希望产品采用哪种产品形态？",
      "请注意，我们必须仅讨论产品形态，不要讨论其他任何内容！一旦我们都表达了自己的意见并一致同意讨论结果，我们中的任何人都必须主动结束讨论，只回复一行话，以单词<INFO>开头，后跟我们最终的产品形态，不包含任何其他词语，例如\"<INFO> PowerPoint\"。"
    ]
  },
  "LanguageChoose": {
    "assistant_role_name": "首席技术官",
    "user_role_name": "首席执行官",
    "phase_prompt": [
      "根据新用户的任务和下面列出的一些创意头脑风暴想法：",
      "任务：\"{task}\"。",
      "形态：\"{modality}\"。",
      "想法：\"{ideas}\"。",
      "我们决定通过编程语言实现的可执行软件来完成任务。",
      "作为{assistant_role}，为了满足新用户的需求并使软件可实现，您应该提出具体的编程语言。如果python可以通过Python完成此任务，请回答Python；否则，回答另一种编程语言（例如Java、C++等）。",
      "请注意，我们必须仅讨论目标编程语言，不要讨论其他任何内容！一旦我们都表达了自己的意见并一致同意讨论结果，我们中的任何人都必须主动结束讨论，并总结我们讨论过的最佳编程语言，不包含任何其他词语或理由，仅返回一行使用格式：\"<INFO> *\"，其中\"*\"代表一种编程语言。"
    ]
  },
  "Coding": {
    "assistant_role_name": "程序员",
    "user_role_name": "首席技术官",
    "phase_prompt": [
      "根据新用户的任务和下面列出的我们的软件设计：",
      "任务：\"{task}\"。",
      "任务描述：\"{description}\"。",
      "形态：\"{modality}\"。",
      "编程语言：\"{language}\"",
      "想法：\"{ideas}\"",
      "我们决定通过使用{language}实现的多文件可执行软件来完成任务。作为{assistant_role}，为了满足新用户的需求，您应该编写一个或多个文件，并确保架构的每个细节最终都以代码形式实现。{gui}",
      "逐步思考并推理自己做出正确的决策，确保我们做对。",
      "您首先要列出必要的核心类、函数、方法的名称，以及对其目的的快速注释。",
      "然后您将输出每个文件的内容，包括完整的代码。每个文件必须严格遵循markdown代码块格式，其中以下标记必须被替换，使得\"FILENAME\"是包含文件扩展名的小写文件名，\"LANGUAGE\"是编程语言，\"DOCSTRING\"是源代码中用于记录特定代码段的字符串字面量，\"CODE\"是原始代码：",
      "FILENAME",
      "```LANGUAGE",
      "'''",
      "DOCSTRING",
      "'''",
      "CODE",
      "```",
      "您将从\"main\"文件开始，然后转到该文件导入的文件，依此类推。",
      "请注意，代码应该是完全功能性的。确保实现所有功能。不允许占位符（如Python中的'pass'）。"
    ]
  },
  "ArtDesign": {
    "assistant_role_name": "程序员",
    "user_role_name": "首席创意官",
    "phase_prompt": [
      "我们开发的源代码和相应的测试报告列在下面：",
      "任务：\"{task}\"。",
      "编程语言：\"{language}\"",
      "源代码：",
      "\"{codes}\"",
      "请注意，每个文件必须严格遵循markdown代码块格式，其中以下标记必须被替换，使得\"FILENAME\"是包含文件扩展名的小写文件名，\"LANGUAGE\"是编程语言，\"DOCSTRING\"是源代码中用于记录特定代码段的字符串字面量，\"CODE\"是原始代码：",
      "FILENAME",
      "```LANGUAGE",
      "'''",
      "DOCSTRING",
      "'''",
      "CODE",
      "```",
      "作为{assistant_role}，为了满足新用户的需求并为软件配备美观的图形用户界面(GUI)，我们将讨论和设计许多装饰图像用于GUI装饰。现在，我们通过列出GUI中一些功能独立的元素来继续讨论GUI美化，这些元素正在考虑用不同的图片进行装饰。例如，计算器中的十个数字(0-9)是功能独立的。",
      "要回答，请使用格式：\"FILENAME.png: DESCRIPTION\"，其中\"FILENAME\"是图像的文件名，\"DESCRIPTION\"表示独立元素的详细描述。例如：",
      "'''",
      "button_1.png: 上面有数字\"1\"的按钮。",
      "button_multiply.png: 上面有乘法符号(\"*\")的按钮。",
      "background.png: 用于装饰围棋游戏的背景颜色",
      "'''",
      "现在，尽可能多地列出所有功能独立的元素。"
    ]
  },
  "ArtIntegration": {
    "assistant_role_name": "程序员",
    "user_role_name": "首席创意官",
    "phase_prompt": [
      "我们开发的源代码和相应的测试报告列在下面：",
      "任务：\"{task}\"。",
      "编程语言：\"{language}\"",
      "源代码：",
      "\"{codes}\"",
      "请注意，每个文件必须严格遵循markdown代码块格式，其中以下标记必须被替换，使得\"FILENAME\"是包含文件扩展名的小写文件名，\"LANGUAGE\"是编程语言，\"DOCSTRING\"是源代码中用于记录特定代码段的字符串字面量，\"CODE\"是原始代码：",
      "FILENAME",
      "```LANGUAGE",
      "'''",
      "DOCSTRING",
      "'''",
      "CODE",
      "```",
      "作为{assistant_role}，为了满足新用户的需求并为软件配备美观的图形用户界面(GUI)，您将整合我们设计的图像用于GUI装饰。以下是一些现成的高质量图片和相应的描述：",
      "{images}",
      "请注意，设计的图像具有256x256像素的固定大小，图像位于与所有Python文件相同的目录中；请根据GUI的大小动态缩放这些图像，并使用\"self.*\"来避免因自动垃圾收集引起的显示相关问题。例如：",
      "```",
      "self.image = ImageTk.PhotoImage(Image.open(\"./image.png\").resize((50, 50)))",
      "```",
      "现在，将一些或所有图片用于GUI，使其更美观和富有创意。严格按照上述要求的格式输出代码。"
    ]
  },
  "CodeComplete": {
    "assistant_role_name": "程序员",
    "user_role_name": "首席技术官",
    "phase_prompt": [
      "根据新用户的任务和下面列出的我们的软件设计：",
      "任务：\"{task}\"。",
      "形态：\"{modality}\"。",
      "编程语言：\"{language}\"",
      "代码：",
      "\"{codes}\"",
      "未实现文件：",
      "\"{unimplemented_file}\"",
      "在我们的软件中，每个文件必须严格遵循markdown代码块格式，其中以下标记必须被替换，使得\"FILENAME\"是包含文件扩展名的小写文件名，\"LANGUAGE\"是编程语言，\"DOCSTRING\"是源代码中用于记录特定代码段的字符串字面量，\"CODE\"是原始代码：",
      "FILENAME",
      "```LANGUAGE",
      "'''",
      "DOCSTRING",
      "'''",
      "CODE",
      "```",
      "作为{assistant_role}，为了满足我们开发的软件的完整功能，您必须实现{unimplemented_file}文件中包含未实现类的所有方法。现在，实现{unimplemented_file}的所有方法和所有其他需要的代码，然后输出完全实现的代码，严格遵循要求的格式。"
    ]
  },
  "CodeReviewComment": {
    "assistant_role_name": "代码审查员",
    "user_role_name": "程序员",
    "phase_prompt": [
      "根据新用户的任务和我们的软件设计：",
      "任务：\"{task}\"。",
      "形态：\"{modality}\"。",
      "编程语言：\"{language}\"",
      "想法：\"{ideas}\"",
      "代码：",
      "\"{codes}\"",
      "作为{assistant_role}，为了使软件能够直接运行而无需进一步编码，ChatDev制定了以下规定：",
      "1) 所有引用的类都应该被导入；",
      "2) 所有方法都应该被实现；",
      "3) 所有方法都需要有必要的注释；",
      "4) 没有潜在的错误；",
      "5) 整个项目符合用户提出的任务；",
      "6) 最重要的是，不仅要检查代码中的错误，还要检查代码的逻辑。确保用户可以与生成的软件交互而不会丢失需求中的任何功能；",
      "现在，您应该逐一检查上述规定并详细审查代码，提出一个关于代码的最高优先级评论，并给我修复指令。告诉我您的最高优先级评论和相应的修改建议。如果代码完美，您对它们没有评论，则仅返回一行，如\"<INFO> Finished\"。"
    ]
  },
  "CodeReviewModification": {
    "assistant_role_name": "程序员",
    "user_role_name": "代码审查员",
    "phase_prompt": [
      "根据新用户的任务、我们设计的产品形态、语言和想法，我们开发的第一版源代码列在下面：",
      "任务：\"{task}\"。",
      "形态：\"{modality}\"。",
      "编程语言：\"{language}\"",
      "想法：\"{ideas}\"",
      "代码：",
      "\"{codes}\"",
      "代码评论：",
      "\"{comments}\"",
      "在软件中，每个文件必须严格遵循markdown代码块格式，其中以下标记必须被替换，使得\"FILENAME\"是包含文件扩展名的小写文件名，\"LANGUAGE\"是编程语言，\"DOCSTRING\"是源代码中用于记录特定代码段的字符串字面量，\"CODE\"是原始代码。格式：",
      "FILENAME",
      "```LANGUAGE",
      "'''",
      "DOCSTRING",
      "'''",
      "CODE",
      "```",
      "作为{assistant_role}，为了满足新用户的需求并使软件富有创意、可执行和稳健，您应该根据评论修改相应的代码。然后，根据评论输出修复了所有错误的完整代码。严格按照要求的格式返回所有代码。"
    ]
  },
  "TestErrorSummary": {
    "assistant_role_name": "程序员",
    "user_role_name": "软件测试工程师",
    "phase_prompt": [
      "我们开发的源代码和相应的测试报告列在下面：",
      "编程语言：\"{language}\"",
      "源代码：",
      "\"{codes}\"",
      "源代码测试报告：",
      "\"{test_reports}\"",
      "根据我的测试报告，请定位并总结导致问题的错误。"
    ]
  },
  "TestModification": {
    "assistant_role_name": "程序员",
    "user_role_name": "软件测试工程师",
    "phase_prompt": [
      "我们开发的源代码和相应的测试报告列在下面：",
      "编程语言：\"{language}\"",
      "源代码：",
      "\"{codes}\"",
      "源代码测试报告：",
      "\"{test_reports}\"",
      "测试报告错误摘要：",
      "\"{error_summary}\"",
      "请注意，每个文件必须严格遵循markdown代码块格式，其中以下标记必须被替换，使得\"FILENAME\"是包含文件扩展名的小写文件名，\"LANGUAGE\"是编程语言，\"DOCSTRING\"是源代码中用于记录特定代码段的字符串字面量，\"CODE\"是原始代码：",
      "FILENAME",
      "```LANGUAGE",
      "'''",
      "DOCSTRING",
      "'''",
      "CODE",
      "```",
      "作为{assistant_role}，为了满足新用户的需求并使软件运行流畅和稳健，您应该根据错误摘要修改代码。现在，使用上面示例的格式，根据错误摘要修改有问题的代码。输出您根据测试报告修复的代码和相应的解释（严格遵循上面定义的格式，包括FILENAME、LANGUAGE、DOCSTRING和CODE；严格禁止不完整的\"TODO\"代码）。如果没有报告错误，请仅返回一行，如\"<INFO> Finished\"。"
    ]
  },
  "EnvironmentDoc": {
    "assistant_role_name": "程序员",
    "user_role_name": "首席技术官",
    "phase_prompt": [
      "新用户的任务和我们开发的代码列出如下：",
      "任务：\"{task}\"。",
      "形态：\"{modality}\"。",
      "编程语言：\"{language}\"",
      "想法：\"{ideas}\"",
      "代码：",
      "\"{codes}\"",
      "作为{assistant_role}，您应该编写一个requirements.txt文件，这在Python项目中通常用于指定项目正常运行所需的依赖项或包。它作为一种以标准化格式记录和管理项目依赖关系的方式。例如：",
      "requirements.txt",
      "```",
      "numpy==1.19.2",
      "pandas>=1.1.4",
      "```",
      "根据上面列出的代码和文件格式，编写一个requirements.txt文件来指定项目正常运行所需的依赖项或包。"
    ]
  },
  "Manual": {
    "assistant_role_name": "首席产品官",
    "user_role_name": "首席执行官",
    "phase_prompt": [
      "新用户的任务、我们开发的代码和所需的依赖关系列出如下：",
      "任务：\"{task}\"。",
      "形态：\"{modality}\"。",
      "编程语言：\"{language}\"",
      "想法：\"{ideas}\"",
      "代码：",
      "\"{codes}\"",
      "依赖关系：",
      "\"{requirements}\"",
      "作为{assistant_role}，通过使用Markdown，您应该编写一个manual.md文件，这是一个详细的用户手册来使用软件，包括介绍软件的主要功能、如何安装环境依赖关系以及如何使用/操作它。例如：",
      "manual.md",
      "```",
      "# LangChain",
      "通过组合性构建LLM应用程序",
      "寻找JS/TS版本？查看LangChain.js。",
      "**生产支持：**当您将LangChains投入生产时，我们很乐意提供更全面的支持。",
      "请填写此表格，我们将设立专门的支持Slack频道。",
      "## 快速安装",
      "`pip install langchain`",
      "或",
      "`conda install langchain -c conda-forge`",
      "## 🤔 这是什么？",
      "大语言模型(LLM)正成为一种变革性技术，使开发人员能够构建以前无法构建的应用程序。然而，单独使用这些LLM通常不足以创建真正强大的应用程序 - 真正的力量来自于您可以将它们与其他计算或知识来源结合。",
      "这个库旨在协助开发这些类型的应用程序。这些应用程序的常见示例包括：",
      "**❓ 特定文档的问答**",
      "- 文档",
      "- 端到端示例：Notion数据库问答",
      "**🤖 代理**",
      "- 文档",
      "- 端到端示例：GPT+WolframAlpha",
      "## 📖 文档",
      "请参阅[这里](https://python.langchain.com)获取完整文档：",
      "- 入门（安装、设置环境、简单示例）",
      "- 如何示例（演示、集成、辅助函数）",
      "- 参考（完整的API文档）",
      "- 资源（核心概念的高级解释）",
      "```"
    ]
  }
}